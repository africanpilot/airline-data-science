{"version":3,"sources":["components/Typography.js","components/Page.js","components/StickyHeadTable.js","components/DataConnectCsv.js","components/DataConnectJson.js","components/DataConnectSql.js","pages/ConnectDataPage.js"],"names":["tagMap","h1","h2","h3","h4","h5","h6","p","lead","blockquote","Typography","TypoComp","Tag","tag","className","type","restProps","classes","classNames","defaultProps","bem","bn","create","Page","title","breadcrumbs","children","b","e","length","map","index","name","active","key","columns","id","label","minWidth","align","format","value","toLocaleString","toFixed","createData","code","population","size","density","rows","useStyles","makeStyles","root","width","container","maxHeight","StickyHeadTable","React","useState","page","setPage","rowsPerPage","setRowsPerPage","stickyHeader","aria-label","column","style","slice","row","hover","role","tabIndex","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","target","DataConnectCsv","state","redirect","setRedirect","setState","renderRedirect","to","window","scrollTo","Row","Col","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","placeholder","readOnly","FormGroup","Label","for","multiple","FormText","color","Component","DataConnectJson","DataConnectSql","ConnectDataPage","csv","json","sql","setRedirectCsv","setRedirectJson","setRedirectSql","renderDataConnection","Card","CardHeader","CardBody","UncontrolledDropdown","DropdownToggle","caret","outline","DropdownMenu","DropdownItem","onClick","this","Button"],"mappings":"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","file":"static/js/26.a5e067d7.chunk.js","sourcesContent":["import classNames from 'classnames';\r\nimport React from 'react';\r\nimport PropTypes from 'utils/propTypes';\r\n\r\nconst tagMap = {\r\n  h1: 'h1',\r\n  h2: 'h2',\r\n  h3: 'h3',\r\n  h4: 'h4',\r\n  h5: 'h5',\r\n  h6: 'h6',\r\n  'display-1': 'h1',\r\n  'display-2': 'h1',\r\n  'display-3': 'h1',\r\n  'display-4': 'h1',\r\n  p: 'p',\r\n  lead: 'p',\r\n  blockquote: 'blockquote',\r\n};\r\n\r\nconst types = Object.keys(tagMap);\r\n\r\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\r\n  const classes = classNames({ [type]: !!type }, className);\r\n  let TypoComp;\r\n\r\n  if (Tag) {\r\n    TypoComp = Tag;\r\n  } else if (!Tag && tagMap[type]) {\r\n    TypoComp = tagMap[type];\r\n  } else {\r\n    TypoComp = 'p';\r\n  }\r\n\r\n  return <TypoComp {...restProps} className={classes} />;\r\n};\r\n\r\nTypography.propTypes = {\r\n  tag: PropTypes.component,\r\n  className: PropTypes.string,\r\n  type: PropTypes.oneOf(types),\r\n};\r\n\r\nTypography.defaultProps = {\r\n  type: 'p',\r\n};\r\n\r\nexport default Typography;\r\n","import React from 'react';\r\nimport PropTypes from 'utils/propTypes';\r\n\r\nimport bn from 'utils/bemnames';\r\n\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\n\r\nimport Typography from './Typography';\r\n\r\nconst bem = bn.create('page');\r\n\r\nconst Page = ({\r\n  title,\r\n  breadcrumbs,\r\n  tag: Tag,\r\n  className,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  const classes = bem.b('px-3', className);\r\n\r\n  return (\r\n    <Tag className={classes} {...restProps}>\r\n      <div className={bem.e('header')}>\r\n        {title && typeof title === 'string' ? (\r\n          <Typography type=\"h1\" className={bem.e('title')}>\r\n            {title}\r\n          </Typography>\r\n        ) : (\r\n            title\r\n          )}\r\n        {breadcrumbs && (\r\n          <Breadcrumb className={bem.e('breadcrumb')}>\r\n            <BreadcrumbItem>Home</BreadcrumbItem>\r\n            {breadcrumbs.length &&\r\n              breadcrumbs.map(({ name, active }, index) => (\r\n                <BreadcrumbItem key={index} active={active}>\r\n                  {name}\r\n                </BreadcrumbItem>\r\n              ))}\r\n          </Breadcrumb>\r\n        )}\r\n      </div>\r\n      {children}\r\n    </Tag>\r\n  );\r\n};\r\n\r\nPage.propTypes = {\r\n  tag: PropTypes.component,\r\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  breadcrumbs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      active: PropTypes.bool,\r\n    })\r\n  ),\r\n};\r\n\r\nPage.defaultProps = {\r\n  tag: 'div',\r\n  title: '',\r\n};\r\n\r\nexport default Page;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Name', minWidth: 170 },\r\n  { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\r\n  {\r\n    id: 'population',\r\n    label: 'Population',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: value => value.toLocaleString(),\r\n  },\r\n  {\r\n    id: 'size',\r\n    label: 'Size\\u00a0(km\\u00b2)',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: value => value.toLocaleString(),\r\n  },\r\n  {\r\n    id: 'density',\r\n    label: 'Density',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: value => value.toFixed(2),\r\n  },\r\n];\r\n\r\nfunction createData(name, code, population, size) {\r\n  const density = population / size;\r\n  return { name, code, population, size, density };\r\n}\r\n\r\nconst rows = [\r\n  createData('India', 'IN', 1324171354, 3287263),\r\n  createData('China', 'CN', 1403500365, 9596961),\r\n  createData('Italy', 'IT', 60483973, 301340),\r\n  createData('United States', 'US', 327167434, 9833520),\r\n  createData('Canada', 'CA', 37602103, 9984670),\r\n  createData('Australia', 'AU', 25475400, 7692024),\r\n  createData('Germany', 'DE', 83019200, 357578),\r\n  createData('Ireland', 'IE', 4857000, 70273),\r\n  createData('Mexico', 'MX', 126577691, 1972550),\r\n  createData('Japan', 'JP', 126317000, 377973),\r\n  createData('France', 'FR', 67022000, 640679),\r\n  createData('United Kingdom', 'GB', 67545757, 242495),\r\n  createData('Russia', 'RU', 146793744, 17098246),\r\n  createData('Nigeria', 'NG', 200962417, 923768),\r\n  createData('Brazil', 'BR', 210147125, 8515767),\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nexport default function StickyHeadTable() {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = event => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n  \r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map(column => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                  {columns.map(column => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={column.id} align={column.align}>\r\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {\r\n  Col, Row, Input, Label, FormGroup, FormText,\r\n  InputGroup, InputGroupText, InputGroupAddon\r\n} from 'reactstrap';\r\nimport {Redirect } from 'react-router-dom';\r\n\r\nclass DataConnectCsv extends React.Component {\r\n  componentDidMount() {\r\n    // this is needed, because InfiniteCalendar forces window scroll\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  state = {\r\n    redirect: false\r\n  }\r\n  setRedirect = () => {\r\n    this.setState({\r\n      redirect: true\r\n    })\r\n  }\r\n  renderRedirect = () => {\r\n    if (this.state.redirect) {\r\n      return <Redirect to='/LoadDataPage' />\r\n    }\r\n  }\r\n\r\nrender() {\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input />\r\n        </InputGroup>\r\n          <br/>\r\n          <InputGroup>\r\n           <InputGroupAddon addonType=\"append\">\r\n             <InputGroupText>Type of Data</InputGroupText>\r\n           </InputGroupAddon>\r\n           <Input placeholder=\"CSV\" readOnly={true}/>\r\n         </InputGroup>\r\n         <br/>\r\n         <FormGroup>\r\n           <Label for=\"exampleSelect\">Amount of Data</Label>\r\n           <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\r\n             <option>Single file</option>\r\n             <option>Multiple file but same dataframe</option>\r\n             <option>Multiple file but different data frame</option>\r\n           </Input>\r\n         </FormGroup>\r\n         <br/>\r\n         <FormGroup>\r\n           <Label for=\"exampleFile\">Location</Label>\r\n           <Input type=\"file\" name=\"file\" id=\"exampleFile\" multiple />\r\n           <FormText color=\"muted\">\r\n             Please select the files you want to load\r\n           </FormText>\r\n         </FormGroup>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n};\r\n\r\nexport default DataConnectCsv;\r\n","import React from 'react';\r\nimport {\r\n  Col, Row, Input, Label, FormGroup, FormText,\r\n  InputGroup, InputGroupText, InputGroupAddon\r\n} from 'reactstrap';\r\nimport {Redirect } from 'react-router-dom';\r\n\r\nclass DataConnectJson extends React.Component {\r\n  componentDidMount() {\r\n    // this is needed, because InfiniteCalendar forces window scroll\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  state = {\r\n    redirect: false\r\n  }\r\n  setRedirect = () => {\r\n    this.setState({\r\n      redirect: true\r\n    })\r\n  }\r\n  renderRedirect = () => {\r\n    if (this.state.redirect) {\r\n      return <Redirect to='/LoadDataPage' />\r\n    }\r\n  }\r\n\r\nrender() {\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input />\r\n        </InputGroup>\r\n          <br/>\r\n          <InputGroup>\r\n           <InputGroupAddon addonType=\"append\">\r\n             <InputGroupText>Type of Data</InputGroupText>\r\n           </InputGroupAddon>\r\n           <Input placeholder=\"JSON\" readOnly={true}/>\r\n         </InputGroup>\r\n         <br/>\r\n         <FormGroup>\r\n           <Label for=\"exampleSelect\">Amount of Data</Label>\r\n           <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\r\n             <option>Single file</option>\r\n             <option>Multiple file but same dataframe</option>\r\n             <option>Multiple file but different data frame</option>\r\n           </Input>\r\n         </FormGroup>\r\n         <br/>\r\n         <FormGroup>\r\n           <Label for=\"exampleFile\">Location</Label>\r\n           <Input type=\"file\" name=\"file\" id=\"exampleFile\" multiple />\r\n           <FormText color=\"muted\">\r\n             Please select the files you want to load\r\n           </FormText>\r\n         </FormGroup>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n};\r\n\r\nexport default DataConnectJson;\r\n","import React from 'react';\r\nimport {\r\n  Col, Row, Input, InputGroup, InputGroupText, InputGroupAddon\r\n} from 'reactstrap';\r\nimport {Redirect } from 'react-router-dom';\r\n\r\nclass DataConnectSql extends React.Component {\r\n  componentDidMount() {\r\n    // this is needed, because InfiniteCalendar forces window scroll\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  state = {\r\n    redirect: false\r\n  }\r\n  setRedirect = () => {\r\n    this.setState({\r\n      redirect: true\r\n    })\r\n  }\r\n  renderRedirect = () => {\r\n    if (this.state.redirect) {\r\n      return <Redirect to='/LoadDataPage' />\r\n    }\r\n  }\r\n\r\nrender() {\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>SQL Server Name</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input />\r\n        </InputGroup>\r\n        <br/>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>SQL Database Name</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input />\r\n        </InputGroup>\r\n        <br/>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>User Name</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input />\r\n        </InputGroup>\r\n        <br/>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Password</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input />\r\n        </InputGroup>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n};\r\n\r\nexport default DataConnectSql;\r\n","import Page from 'components/Page';\r\nimport React from 'react';\r\nimport {\r\n  Card, CardBody, CardHeader, Col, Row, Button,\r\n  UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem\r\n} from 'reactstrap';\r\nimport {Redirect } from 'react-router-dom';\r\nimport StickyHeadTable from 'components/StickyHeadTable';\r\nimport DataConnectCsv from 'components/DataConnectCsv';\r\nimport DataConnectJson from 'components/DataConnectJson';\r\nimport DataConnectSql from 'components/DataConnectSql';\r\n\r\nclass ConnectDataPage extends React.Component {\r\n  componentDidMount() {\r\n    // this is needed, because InfiniteCalendar forces window scroll\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  state = {\r\n    redirect: false,\r\n    csv : false,\r\n    json: false,\r\n    sql: false,\r\n  }\r\n\r\n  setRedirect = () => {\r\n    this.setState({\r\n      redirect: true,\r\n      csv : true,\r\n      json: true,\r\n      sql: true\r\n    })\r\n  }\r\n\r\n  setRedirectCsv = () => {\r\n    this.setState({\r\n      csv : true,\r\n      json: false,\r\n      sql: false\r\n    })\r\n  }\r\n\r\n  setRedirectJson = () => {\r\n    this.setState({\r\n      json: true,\r\n      csv : false,\r\n      sql: false\r\n    })\r\n  }\r\n\r\n  setRedirectSql = () => {\r\n    this.setState({\r\n      sql: true,\r\n      json: false,\r\n      csv : false\r\n    })\r\n  }\r\n\r\n  renderRedirect = () => {\r\n    if (this.state.redirect) {\r\n      return <Redirect to='/LoadDataPage' />\r\n    }\r\n  }\r\n\r\n  renderDataConnection = () => {\r\n    if (this.state.csv) {\r\n      return <DataConnectCsv/>\r\n    }\r\n    if (this.state.json) {\r\n      return <DataConnectJson/>\r\n    }\r\n    if (this.state.sql) {\r\n      return <DataConnectSql/>\r\n    }\r\n  }\r\n\r\nrender() {\r\n  return (\r\n    <Page title=\"Data Connection\" breadcrumbs={[{ name: 'Data Connection', active: true }]}>\r\n      <Row>\r\n        <Col>\r\n          <Card className=\"mb-3\">\r\n            <CardHeader>Select Data load Type</CardHeader>\r\n              <CardBody>\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle caret outline color=\"secondary\">\r\n                  Connection\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                  <DropdownItem onClick={this.setRedirectCsv}>CSV</DropdownItem>\r\n                  <DropdownItem onClick={this.setRedirectJson}>JSON</DropdownItem>\r\n                  <DropdownItem onClick={this.setRedirectSql}>SQL</DropdownItem>\r\n                  <DropdownItem onClick={this.setRedirectSql}>SQLITE</DropdownItem>\r\n                  <DropdownItem onClick={this.setRedirectSql}>MONGODB</DropdownItem>\r\n                  <DropdownItem onClick={this.setRedirectSql}>WEB API</DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <Card className=\"mb-3\">\r\n                <CardHeader>Connection Fields</CardHeader>\r\n                  <CardBody>\r\n                  {this.renderDataConnection()}\r\n                    <Button outline color=\"primary\">LoadData</Button>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n\r\n\r\n      <Row>\r\n        <Col>\r\n          <Card className=\"mb-3\">\r\n            <CardHeader>View DataFrame</CardHeader>\r\n            <CardBody>\r\n            <StickyHeadTable/>\r\n            <br/>\r\n            {this.renderRedirect()}\r\n            <Button outline color=\"primary\" onClick={this.setRedirect}>Submit</Button>{' '}\r\n            <Button outline color=\"secondary\" onClick={this.setRedirect}>Cancel</Button>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Page>\r\n  );\r\n};\r\n};\r\n\r\nexport default ConnectDataPage;\r\n"],"sourceRoot":""}